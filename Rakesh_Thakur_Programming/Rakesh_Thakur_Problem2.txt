using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Round2Assesment
{
    class Program
    {
        static int Fibonacci(int n)
        {
            if (n == 0)
                return 0;
            if (n == 1)
                return 1;
            return (Fibonacci(n-1) + Fibonacci(n-2));
        }

        static void Main(string[] args)
        {
            // Taking inputs from user
            Console.WriteLine("Enter N : ");
            int N = Convert.ToInt32(Console.ReadLine());

            // creating matrix of N X N 
            int[,] matrix = new int[N,N];
            int count = 2;
            for (int i = 0; i < N; i++)
            {                
                for (int j = 0; j < N; j++)
                {
                    if (j == 0)
                    {
                        // Calling fibonacci function 
                        matrix[i, j] = Fibonacci(count);
                        count++;
                    }
                    else
                    {
                        int add = ((j + 1) * (j + 2)) / 2;
                        matrix[i, j] = matrix[i, j - 1] + add;
                    }
                }
            }

            // Displaying matrix 

            Console.WriteLine("Before sorting Z ");
            for (int i = 0; i < N; i++)
            {               
                for (int j = 0; j < N; j++)
                      Console.Write(matrix[i,j] + " ");
                Console.WriteLine();
            }

            // creating a generic list to store highlighted elelemts in matrix
            List<int> listMatrix = new List<int>();

            // Finding Highlighted elements
            for (int i = 0; i < N; i++)
            {
                for (int j = 0; j < N; j++)
                {
                    if ((i == 0) || (i == (N - 1)))        // Checking last row (N-1) and first row (0) 
                        listMatrix.Add(matrix[i, j]);
                    else
                    {
                        listMatrix.Add(matrix[i, N - 1 - j-i]);
                        break;
                    }                        
                }
            }
            listMatrix.Sort();

            Console.WriteLine("\nHighlighted elements after sort");
            foreach (var item in listMatrix)
            {
                Console.Write(item + " ");
            }
            
            int k = 0;
            for (int i = 0; i < N; i++)
            {
                for (int j = 0; j < N; j++)
                {
                   if ((i == 0) || (i == (N - 1)))
                   {
                         matrix[i, j] = listMatrix[k];            // using list indexer to access each item in list
                        k++;                               
                   }
                   else
                   {
                        matrix[i, N - 1 - j - i] = listMatrix[k];
                        k++;
                        break;
                   }
                }
            }

            Console.WriteLine("\n\n After sorting Z ");
            for (int i = 0; i < N; i++)
            {
                for (int j = 0; j < N; j++)
                    Console.Write(matrix[i, j] + " ");
                Console.WriteLine();
            }

            Console.ReadLine();
        }
    }
}
